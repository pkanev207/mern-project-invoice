# upstream block defines a group of backends or servers for Nginx to load balance
upstream api {
    # the server is going to be called api from our container and runs on port 1997
    server api:1997;
}

upstream client {
    server client:3000;
}

# After that we declare our actual server
server {
    # the default file upload size in Nginx is limited to 1MB by default - we change it to 20 MB
    client_max_body_size 20M;
    # the listen directive sets the port for our server to listen on
    # the Port is 80 because in development we are dealing with HTTP
    listen 80;
    # in production we are dealing with HTTPS and the Port will be 443
    # location block identifies the base paths of the URLs which will get routed to
    # if user navigates here we are going to pass that request to the proxy server
    location /api/v1/ {
        # location block identifies the base paths or the urls which will get routed to
        # this api is now api upstream backend or server we created in the upstream block
        proxy_pass http://api;
        # set some headers
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # in our case the host is going to be port 80
        proxy_set_header Host $host;
        # Sets the text that should be changed in the "Location" and "Refresh" header fields of a proxied server response.
        proxy_redirect off;
    }
    # another location for static files, should we want to serve them via nginx, such as images, css and js files
    location /staticfiles/ {
        alias /app/staticfiles/;
    }
    # location for our WebSocket connection to our client server
    location /ws {
        proxy_pass http://client;

        proxy_http_version 1.1;
        # in order for the proxied backend to know about the client's intention to switch a protocol
        # to WebSocket, these headers have to be passed explicitly
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    # if the user navigate to home route
    location / {
        proxy_pass http://client;
        proxy_redirect off;
        proxy_set_header Host $host;
        # X-Real-IP identifies a client's IP address
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # X-forwarded-for host header is the defacto standart header for identifying the original
        # hosts requested of the client, connecting to e web server, in the host http request header
        # since the host name and/or port of the reverse proxy (load balancer) may differ
        # from the origin server handling the request
        # $server_name - name of the server which accepts the request
        proxy_set_header X-Forwarded-Host $server_name;
    }
}
